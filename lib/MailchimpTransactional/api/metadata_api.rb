=begin
#Mailchimp Transactional API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.9
Contact: apihelp@mandrill.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module MailchimpTransactional
  class MetadataApi
    attr_accessor :api_client

    attr_accessor :api_key

    def initialize(api_key = '', api_client = ApiClient.default)
      @api_key = api_key
      @api_client = api_client
    end
    # Add metadata field
    # Add a new custom metadata field to be indexed for the account.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20034]
    def add(body = {}, opts = {})
      data = add_with_http_info(body, opts)
      data
    end

    # Add metadata field
    # Add a new custom metadata field to be indexed for the account.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20034, Fixnum, Hash)>] InlineResponse20034 data, response status code and response headers
    def add_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/metadata/add'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Delete metadata field
    # Delete an existing custom metadata field. Deletion isn't instataneous, and /metadata/list will continue to return the field until the asynchronous deletion process is complete.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20036]
    def delete(body = {}, opts = {})
      data = delete_with_http_info(body, opts)
      data
    end

    # Delete metadata field
    # Delete an existing custom metadata field. Deletion isn&#39;t instataneous, and /metadata/list will continue to return the field until the asynchronous deletion process is complete.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20036, Fixnum, Hash)>] InlineResponse20036 data, response status code and response headers
    def delete_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/metadata/delete'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # List metadata fields
    # Get the list of custom metadata fields indexed for the account.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20033>]
    def list(body = {}, opts = {})
      data = list_with_http_info(body, opts)
      data
    end

    # List metadata fields
    # Get the list of custom metadata fields indexed for the account.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20033>, Fixnum, Hash)>] Array<InlineResponse20033> data, response status code and response headers
    def list_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/metadata/list'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Update metadata field
    # Update an existing custom metadata field.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20035]
    def update(body = {}, opts = {})
      data = update_with_http_info(body, opts)
      data
    end

    # Update metadata field
    # Update an existing custom metadata field.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20035, Fixnum, Hash)>] InlineResponse20035 data, response status code and response headers
    def update_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/metadata/update'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
  end
end
