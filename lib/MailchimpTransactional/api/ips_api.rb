=begin
#Mailchimp Transactional API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.9
Contact: apihelp@mandrill.com
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.12

=end

require 'uri'

module MailchimpTransactional
  class IpsApi
    attr_accessor :api_client

    attr_accessor :api_key

    def initialize(api_key = '', api_client = ApiClient.default)
      @api_key = api_key
      @api_client = api_client
    end
    # Cancel ip warmup
    # Cancels the warmup process for a dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20017]
    def cancel_warmup(body = {}, opts = {})
      data = cancel_warmup_with_http_info(body, opts)
      data
    end

    # Cancel ip warmup
    # Cancels the warmup process for a dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20017, Fixnum, Hash)>] InlineResponse20017 data, response status code and response headers
    def cancel_warmup_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/cancel-warmup'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Test custom dns
    # Tests whether a domain name is valid for use as the custom reverse DNS for a dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20023]
    def check_custom_dns(body = {}, opts = {})
      data = check_custom_dns_with_http_info(body, opts)
      data
    end

    # Test custom dns
    # Tests whether a domain name is valid for use as the custom reverse DNS for a dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20023, Fixnum, Hash)>] InlineResponse20023 data, response status code and response headers
    def check_custom_dns_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/check-custom-dns'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Add ip pool
    # Creates a pool and returns it. If a pool already exists with this name, no action will be performed.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def create_pool(body = {}, opts = {})
      data = create_pool_with_http_info(body, opts)
      data
    end

    # Add ip pool
    # Creates a pool and returns it. If a pool already exists with this name, no action will be performed.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Fixnum, Hash)>] InlineResponse20021 data, response status code and response headers
    def create_pool_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/create-pool'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Delete ip address
    # Deletes a dedicated IP. This is permanent and cannot be undone.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20019]
    def delete(body = {}, opts = {})
      data = delete_with_http_info(body, opts)
      data
    end

    # Delete ip address
    # Deletes a dedicated IP. This is permanent and cannot be undone.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20019, Fixnum, Hash)>] InlineResponse20019 data, response status code and response headers
    def delete_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/delete'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Delete ip pool
    # Deletes a pool. A pool must be empty before you can delete it, and you cannot delete your default pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20022]
    def delete_pool(body = {}, opts = {})
      data = delete_pool_with_http_info(body, opts)
      data
    end

    # Delete ip pool
    # Deletes a pool. A pool must be empty before you can delete it, and you cannot delete your default pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20022, Fixnum, Hash)>] InlineResponse20022 data, response status code and response headers
    def delete_pool_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/delete-pool'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Get ip info
    # Retrieves information about a single dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20015]
    def info(body = {}, opts = {})
      data = info_with_http_info(body, opts)
      data
    end

    # Get ip info
    # Retrieves information about a single dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20015, Fixnum, Hash)>] InlineResponse20015 data, response status code and response headers
    def info_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/info'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # List ip addresses
    # Lists your dedicated IPs.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20014>]
    def list(body = {}, opts = {})
      data = list_with_http_info(body, opts)
      data
    end

    # List ip addresses
    # Lists your dedicated IPs.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20014>, Fixnum, Hash)>] Array<InlineResponse20014> data, response status code and response headers
    def list_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/list'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # List ip pools
    # Lists your dedicated IP pools.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20020>]
    def list_pools(body = {}, opts = {})
      data = list_pools_with_http_info(body, opts)
      data
    end

    # List ip pools
    # Lists your dedicated IP pools.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20020>, Fixnum, Hash)>] Array<InlineResponse20020> data, response status code and response headers
    def list_pools_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/list-pools'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Get ip pool info
    # Describes a single dedicated IP pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def pool_info(body = {}, opts = {})
      data = pool_info_with_http_info(body, opts)
      data
    end

    # Get ip pool info
    # Describes a single dedicated IP pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Fixnum, Hash)>] InlineResponse20021 data, response status code and response headers
    def pool_info_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/pool-info'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Request additional ip
    # Requests an additional dedicated IP for your account. Accounts may have one outstanding request at any time, and provisioning requests are processed within 24 hours.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20016]
    def provision(body = {}, opts = {})
      data = provision_with_http_info(body, opts)
      data
    end

    # Request additional ip
    # Requests an additional dedicated IP for your account. Accounts may have one outstanding request at any time, and provisioning requests are processed within 24 hours.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20016, Fixnum, Hash)>] InlineResponse20016 data, response status code and response headers
    def provision_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/provision'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Set custom dns
    # Configures the custom DNS name for a dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20024]
    def set_custom_dns(body = {}, opts = {})
      data = set_custom_dns_with_http_info(body, opts)
      data
    end

    # Set custom dns
    # Configures the custom DNS name for a dedicated IP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20024, Fixnum, Hash)>] InlineResponse20024 data, response status code and response headers
    def set_custom_dns_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/set-custom-dns'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Move ip to different pool
    # Moves a dedicated IP to a different pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20018]
    def set_pool(body = {}, opts = {})
      data = set_pool_with_http_info(body, opts)
      data
    end

    # Move ip to different pool
    # Moves a dedicated IP to a different pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20018, Fixnum, Hash)>] InlineResponse20018 data, response status code and response headers
    def set_pool_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/set-pool'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
    # Start ip warmup
    # Begins the warmup process for a dedicated IP. During the warmup process, the Transactional API will gradually increase the percentage of your mail that is sent over the warming-up IP, over a period of roughly 30 days. The rest of your mail will be sent over shared IPs or other dedicated IPs in the same pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20017]
    def start_warmup(body = {}, opts = {})
      data = start_warmup_with_http_info(body, opts)
      data
    end

    # Start ip warmup
    # Begins the warmup process for a dedicated IP. During the warmup process, the Transactional API will gradually increase the percentage of your mail that is sent over the warming-up IP, over a period of roughly 30 days. The rest of your mail will be sent over shared IPs or other dedicated IPs in the same pool.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20017, Fixnum, Hash)>] InlineResponse20017 data, response status code and response headers
    def start_warmup_with_http_info(body, opts = {})
      # add api key to request body
      body[:key] = @api_key

      # resource path
      local_var_path = '/ips/start-warmup'

      # http body (model)
      data = @api_client.call_api(:POST, local_var_path, :body => body)
      return data
    end
  end
end
